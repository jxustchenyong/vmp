version: "3"
services:
  server:
    build:
      context: .
      args:
        NPM_LOG_LEVEL: notice
    ports:
      - ${PORT}:3000
    environment:
      BCRYPT_SALT: ${BCRYPT_SALT}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      LOG_LEVEL: ${LOG_LEVEL}
      SERVICE_NAME: ${SERVICE_NAME}
      DB_URL: mysql://${DB_USER}:${DB_PASSWORD}@db:3306/${DB_NAME}
    depends_on:
      - redis
    restart: on-failure
  migrate:
    build:
      context: .
      args:
        NPM_LOG_LEVEL: notice
    command: npm run db:init
    working_dir: /app/server
    environment:
      BCRYPT_SALT: ${BCRYPT_SALT}
      DB_URL: mysql://${DB_USER}:${DB_PASSWORD}@db:3306/${DB_NAME}
    depends_on:
      db:
        condition: service_healthy
  db:
    image: mysql
    ports:
      - ${DB_PORT}:3306
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASSWORD}
      MONGO_INITDB_DATABASE: ${DB_NAME}
      MONGO_REPLICA_SET_NAME: rs0
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    restart: always
    entrypoint:
      - /bin/bash
      - -c
      - openssl rand -base64 741 > /data/cert.crt; chmod 400 /data/cert.crt &&
        chown 999 /data/cert.crt; /usr/local/bin/docker-entrypoint.sh mongod
        --bind_ip_all --keyFile /data/cert.crt --replSet rs0
    healthcheck:
      test:
        - CMD
        - mysqladmin
        - ping
        - -h
        - localhost
        - -u
        - ${DB_USER}
      start_period: 5s
      interval: 10s
      timeout: 45s
      retries: 10
    volumes:
      - mongo:/var/lib/mongosql/data
    command: --default-authentication-plugin=mysql_native_password
  adminer:
    image: adminer
    restart: always
    ports:
      - 1234:8080
  redis:
    container_name: ${REDIS_HOST}
    image: redis:7
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - redis:/data
volumes:
  mongo: ~
  mysql: ~
  redis:
    driver: local
